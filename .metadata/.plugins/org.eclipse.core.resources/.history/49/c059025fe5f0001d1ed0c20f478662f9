package com.olxadvertise.serviceImpl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.olxadvertise.service.UserServiceDelegate;

@Service
public class UserServiceDelegateCircuitBreakerImpl implements UserServiceDelegate {


	@Autowired
	CircuitBreakerFactory ciruitBreakerFactory;
	
	@Autowired
	RestTemplate restTemplate;
	
	@Override
	public Boolean isValidUser(String auth_token) {
		HttpHeaders headers = new HttpHeaders();
		headers.add("Authorization", auth_token);
		headers.add("Content-type", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<String> entity = new HttpEntity<>(headers);
		CircuitBreaker circuitBreaker = ciruitBreakerFactory.create("AUTH_TOKEN_VALIDATION");
		ResponseEntity<Boolean> result = circuitBreaker.run(()->this.restTemplate.exchange("http://login-service/token/validate", HttpMethod.GET, entity, Boolean.class), 
				throwable -> fallbackForIsValidUser(auth_token, throwable));
		return result.getBody();
	} 

	private ResponseEntity<Boolean> fallbackForIsValidUser(String auth_token, Throwable throwable) {
		
		return new ResponseEntity<Boolean>(false, HttpStatus.INTERNAL_SERVER_ERROR);
	}
	

}
